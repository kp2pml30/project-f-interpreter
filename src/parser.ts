/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ---
* import * as ast from "./ast";
* ---
* start := _ els={pos=@ el=element _}* _
*     .expr = Array<[ast.PosInfo, ast.Expr]> { return this.els.map(x => [x.pos, x.el.expr]) }
* list := _ pos=@ '\(' _ sub={els=element _}* _ '\)' _
*     .expr = ast.Application {
*         return {
*             kind: "app",
*             pos: this.pos,
*             exprs: this.sub.map(x => x.els.expr)
*         }
*     }
* element :=
*     e=list
*         .expr = ast.Expr { return this.e.expr }
*     | e=literal
*         .expr = ast.Expr { return this.e.expr }
*     | e=ident
*         .expr = ast.Expr { return this.e.expr }
* literal :=
*     e=integer
*         .expr = ast.Expr { return this.e.expr }
*     | e=real
*         .expr = ast.Expr { return this.e.expr }
*     | e=bool
*         .expr = ast.Expr { return this.e.expr }
*     | e=nll
*         .expr = ast.Expr { return this.e.expr }
* real := pos=@ str='[\-+]?[0-9]+\.[0-9]+'
*     .expr = ast.Literal {
*         return {
*             kind: "literal",
*             pos: this.pos,
*             value: Number.parseFloat(this.str)
*         }
*     }
* integer := pos=@ str='[\-+]?[0-9]+' !'\.'
*     .expr = ast.Literal {
*         return {
*             kind: "literal",
*             pos: this.pos,
*             value: BigInt(this.str)
*         }
*     }
* bool :=
*     pos=@ 'true\b'
*     .expr = ast.Literal { return { kind: "literal", pos: this.pos, value: true } }
*     | pos=@ 'false\b'
*     .expr = ast.Literal { return { kind: "literal", pos: this.pos, value: false } }
* nll := pos=@ 'null\b'
*     .expr = ast.Literal { return { kind: "literal", pos: this.pos, value: null } }
* ident := pos=@ str='[a-zA-Z][a-zA-Z0-9]*'
*     .expr = ast.Ident { return { kind: "ident", pos: this.pos, name: this.str } }
* _ := '[\s\n]*'
*/

import * as ast from "./ast";

type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    start = "start",
    start_$0 = "start_$0",
    list = "list",
    list_$0 = "list_$0",
    element_1 = "element_1",
    element_2 = "element_2",
    element_3 = "element_3",
    literal_1 = "literal_1",
    literal_2 = "literal_2",
    literal_3 = "literal_3",
    literal_4 = "literal_4",
    real = "real",
    integer = "integer",
    bool_1 = "bool_1",
    bool_2 = "bool_2",
    nll = "nll",
    ident = "ident",
    _ = "_",
}
export class start {
    public kind: ASTKinds.start = ASTKinds.start;
    public els: start_$0[];
    public expr: Array<[ast.PosInfo, ast.Expr]>;
    constructor(els: start_$0[]){
        this.els = els;
        this.expr = ((): Array<[ast.PosInfo, ast.Expr]> => {
        return this.els.map(x => [x.pos, x.el.expr])
        })();
    }
}
export interface start_$0 {
    kind: ASTKinds.start_$0;
    pos: PosInfo;
    el: element;
}
export class list {
    public kind: ASTKinds.list = ASTKinds.list;
    public pos: PosInfo;
    public sub: list_$0[];
    public expr: ast.Application;
    constructor(pos: PosInfo, sub: list_$0[]){
        this.pos = pos;
        this.sub = sub;
        this.expr = ((): ast.Application => {
        return {
            kind: "app",
            pos: this.pos,
            exprs: this.sub.map(x => x.els.expr)
        }
        })();
    }
}
export interface list_$0 {
    kind: ASTKinds.list_$0;
    els: element;
}
export type element = element_1 | element_2 | element_3;
export class element_1 {
    public kind: ASTKinds.element_1 = ASTKinds.element_1;
    public e: list;
    public expr: ast.Expr;
    constructor(e: list){
        this.e = e;
        this.expr = ((): ast.Expr => {
        return this.e.expr
        })();
    }
}
export class element_2 {
    public kind: ASTKinds.element_2 = ASTKinds.element_2;
    public e: literal;
    public expr: ast.Expr;
    constructor(e: literal){
        this.e = e;
        this.expr = ((): ast.Expr => {
        return this.e.expr
        })();
    }
}
export class element_3 {
    public kind: ASTKinds.element_3 = ASTKinds.element_3;
    public e: ident;
    public expr: ast.Expr;
    constructor(e: ident){
        this.e = e;
        this.expr = ((): ast.Expr => {
        return this.e.expr
        })();
    }
}
export type literal = literal_1 | literal_2 | literal_3 | literal_4;
export class literal_1 {
    public kind: ASTKinds.literal_1 = ASTKinds.literal_1;
    public e: integer;
    public expr: ast.Expr;
    constructor(e: integer){
        this.e = e;
        this.expr = ((): ast.Expr => {
        return this.e.expr
        })();
    }
}
export class literal_2 {
    public kind: ASTKinds.literal_2 = ASTKinds.literal_2;
    public e: real;
    public expr: ast.Expr;
    constructor(e: real){
        this.e = e;
        this.expr = ((): ast.Expr => {
        return this.e.expr
        })();
    }
}
export class literal_3 {
    public kind: ASTKinds.literal_3 = ASTKinds.literal_3;
    public e: bool;
    public expr: ast.Expr;
    constructor(e: bool){
        this.e = e;
        this.expr = ((): ast.Expr => {
        return this.e.expr
        })();
    }
}
export class literal_4 {
    public kind: ASTKinds.literal_4 = ASTKinds.literal_4;
    public e: nll;
    public expr: ast.Expr;
    constructor(e: nll){
        this.e = e;
        this.expr = ((): ast.Expr => {
        return this.e.expr
        })();
    }
}
export class real {
    public kind: ASTKinds.real = ASTKinds.real;
    public pos: PosInfo;
    public str: string;
    public expr: ast.Literal;
    constructor(pos: PosInfo, str: string){
        this.pos = pos;
        this.str = str;
        this.expr = ((): ast.Literal => {
        return {
            kind: "literal",
            pos: this.pos,
            value: Number.parseFloat(this.str)
        }
        })();
    }
}
export class integer {
    public kind: ASTKinds.integer = ASTKinds.integer;
    public pos: PosInfo;
    public str: string;
    public expr: ast.Literal;
    constructor(pos: PosInfo, str: string){
        this.pos = pos;
        this.str = str;
        this.expr = ((): ast.Literal => {
        return {
            kind: "literal",
            pos: this.pos,
            value: BigInt(this.str)
        }
        })();
    }
}
export type bool = bool_1 | bool_2;
export class bool_1 {
    public kind: ASTKinds.bool_1 = ASTKinds.bool_1;
    public pos: PosInfo;
    public expr: ast.Literal;
    constructor(pos: PosInfo){
        this.pos = pos;
        this.expr = ((): ast.Literal => {
        return { kind: "literal", pos: this.pos, value: true }
        })();
    }
}
export class bool_2 {
    public kind: ASTKinds.bool_2 = ASTKinds.bool_2;
    public pos: PosInfo;
    public expr: ast.Literal;
    constructor(pos: PosInfo){
        this.pos = pos;
        this.expr = ((): ast.Literal => {
        return { kind: "literal", pos: this.pos, value: false }
        })();
    }
}
export class nll {
    public kind: ASTKinds.nll = ASTKinds.nll;
    public pos: PosInfo;
    public expr: ast.Literal;
    constructor(pos: PosInfo){
        this.pos = pos;
        this.expr = ((): ast.Literal => {
        return { kind: "literal", pos: this.pos, value: null }
        })();
    }
}
export class ident {
    public kind: ASTKinds.ident = ASTKinds.ident;
    public pos: PosInfo;
    public str: string;
    public expr: ast.Ident;
    constructor(pos: PosInfo, str: string){
        this.pos = pos;
        this.str = str;
        this.expr = ((): ast.Ident => {
        return { kind: "ident", pos: this.pos, name: this.str }
        })();
    }
}
export type _ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchstart($$dpth: number, $$cr?: ErrorTracker): Nullable<start> {
        return this.run<start>($$dpth,
            () => {
                let $scope$els: Nullable<start_$0[]>;
                let $$res: Nullable<start> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$els = this.loop<start_$0>(() => this.matchstart_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new start($scope$els);
                }
                return $$res;
            });
    }
    public matchstart_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<start_$0> {
        return this.run<start_$0>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$el: Nullable<element>;
                let $$res: Nullable<start_$0> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && ($scope$el = this.matchelement($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.start_$0, pos: $scope$pos, el: $scope$el};
                }
                return $$res;
            });
    }
    public matchlist($$dpth: number, $$cr?: ErrorTracker): Nullable<list> {
        return this.run<list>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$sub: Nullable<list_$0[]>;
                let $$res: Nullable<list> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:\()`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$sub = this.loop<list_$0>(() => this.matchlist_$0($$dpth + 1, $$cr), 0, -1)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, "", $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = new list($scope$pos, $scope$sub);
                }
                return $$res;
            });
    }
    public matchlist_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<list_$0> {
        return this.run<list_$0>($$dpth,
            () => {
                let $scope$els: Nullable<element>;
                let $$res: Nullable<list_$0> = null;
                if (true
                    && ($scope$els = this.matchelement($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.list_$0, els: $scope$els};
                }
                return $$res;
            });
    }
    public matchelement($$dpth: number, $$cr?: ErrorTracker): Nullable<element> {
        return this.choice<element>([
            () => this.matchelement_1($$dpth + 1, $$cr),
            () => this.matchelement_2($$dpth + 1, $$cr),
            () => this.matchelement_3($$dpth + 1, $$cr),
        ]);
    }
    public matchelement_1($$dpth: number, $$cr?: ErrorTracker): Nullable<element_1> {
        return this.run<element_1>($$dpth,
            () => {
                let $scope$e: Nullable<list>;
                let $$res: Nullable<element_1> = null;
                if (true
                    && ($scope$e = this.matchlist($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new element_1($scope$e);
                }
                return $$res;
            });
    }
    public matchelement_2($$dpth: number, $$cr?: ErrorTracker): Nullable<element_2> {
        return this.run<element_2>($$dpth,
            () => {
                let $scope$e: Nullable<literal>;
                let $$res: Nullable<element_2> = null;
                if (true
                    && ($scope$e = this.matchliteral($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new element_2($scope$e);
                }
                return $$res;
            });
    }
    public matchelement_3($$dpth: number, $$cr?: ErrorTracker): Nullable<element_3> {
        return this.run<element_3>($$dpth,
            () => {
                let $scope$e: Nullable<ident>;
                let $$res: Nullable<element_3> = null;
                if (true
                    && ($scope$e = this.matchident($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new element_3($scope$e);
                }
                return $$res;
            });
    }
    public matchliteral($$dpth: number, $$cr?: ErrorTracker): Nullable<literal> {
        return this.choice<literal>([
            () => this.matchliteral_1($$dpth + 1, $$cr),
            () => this.matchliteral_2($$dpth + 1, $$cr),
            () => this.matchliteral_3($$dpth + 1, $$cr),
            () => this.matchliteral_4($$dpth + 1, $$cr),
        ]);
    }
    public matchliteral_1($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_1> {
        return this.run<literal_1>($$dpth,
            () => {
                let $scope$e: Nullable<integer>;
                let $$res: Nullable<literal_1> = null;
                if (true
                    && ($scope$e = this.matchinteger($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new literal_1($scope$e);
                }
                return $$res;
            });
    }
    public matchliteral_2($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_2> {
        return this.run<literal_2>($$dpth,
            () => {
                let $scope$e: Nullable<real>;
                let $$res: Nullable<literal_2> = null;
                if (true
                    && ($scope$e = this.matchreal($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new literal_2($scope$e);
                }
                return $$res;
            });
    }
    public matchliteral_3($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_3> {
        return this.run<literal_3>($$dpth,
            () => {
                let $scope$e: Nullable<bool>;
                let $$res: Nullable<literal_3> = null;
                if (true
                    && ($scope$e = this.matchbool($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new literal_3($scope$e);
                }
                return $$res;
            });
    }
    public matchliteral_4($$dpth: number, $$cr?: ErrorTracker): Nullable<literal_4> {
        return this.run<literal_4>($$dpth,
            () => {
                let $scope$e: Nullable<nll>;
                let $$res: Nullable<literal_4> = null;
                if (true
                    && ($scope$e = this.matchnll($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new literal_4($scope$e);
                }
                return $$res;
            });
    }
    public matchreal($$dpth: number, $$cr?: ErrorTracker): Nullable<real> {
        return this.run<real>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$str: Nullable<string>;
                let $$res: Nullable<real> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && ($scope$str = this.regexAccept(String.raw`(?:[\-+]?[0-9]+\.[0-9]+)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new real($scope$pos, $scope$str);
                }
                return $$res;
            });
    }
    public matchinteger($$dpth: number, $$cr?: ErrorTracker): Nullable<integer> {
        return this.run<integer>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$str: Nullable<string>;
                let $$res: Nullable<integer> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && ($scope$str = this.regexAccept(String.raw`(?:[\-+]?[0-9]+)`, "", $$dpth + 1, $$cr)) !== null
                    && this.negate(() => this.regexAccept(String.raw`(?:\.)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new integer($scope$pos, $scope$str);
                }
                return $$res;
            });
    }
    public matchbool($$dpth: number, $$cr?: ErrorTracker): Nullable<bool> {
        return this.choice<bool>([
            () => this.matchbool_1($$dpth + 1, $$cr),
            () => this.matchbool_2($$dpth + 1, $$cr),
        ]);
    }
    public matchbool_1($$dpth: number, $$cr?: ErrorTracker): Nullable<bool_1> {
        return this.run<bool_1>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<bool_1> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:true\b)`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new bool_1($scope$pos);
                }
                return $$res;
            });
    }
    public matchbool_2($$dpth: number, $$cr?: ErrorTracker): Nullable<bool_2> {
        return this.run<bool_2>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<bool_2> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:false\b)`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new bool_2($scope$pos);
                }
                return $$res;
            });
    }
    public matchnll($$dpth: number, $$cr?: ErrorTracker): Nullable<nll> {
        return this.run<nll>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $$res: Nullable<nll> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && this.regexAccept(String.raw`(?:null\b)`, "", $$dpth + 1, $$cr) !== null
                ) {
                    $$res = new nll($scope$pos);
                }
                return $$res;
            });
    }
    public matchident($$dpth: number, $$cr?: ErrorTracker): Nullable<ident> {
        return this.run<ident>($$dpth,
            () => {
                let $scope$pos: Nullable<PosInfo>;
                let $scope$str: Nullable<string>;
                let $$res: Nullable<ident> = null;
                if (true
                    && ($scope$pos = this.mark()) !== null
                    && ($scope$str = this.regexAccept(String.raw`(?:[a-zA-Z][a-zA-Z0-9]*)`, "", $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new ident($scope$pos, $scope$str);
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:[\s\n]*)`, "", $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstart(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstart(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstart(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    // @ts-ignore: loopPlus may not be called
    private loopPlus<T>(func: $$RuleType<T>): Nullable<[T, ...T[]]> {
        return this.loop(func, 1, -1) as Nullable<[T, ...T[]]>;
    }
    private loop<T>(func: $$RuleType<T>, lb: number, ub: number): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        while (ub === -1 || res.length < ub) {
            const preMrk = this.mark();
            const t = func();
            if (t === null || this.pos.overallPos === preMrk.overallPos) {
                break;
            }
            res.push(t);
        }
        if (res.length >= lb) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    // @ts-ignore: choice may not be called
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, mods: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y" + mods);
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    // @ts-ignore: noConsume may not be called
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    // @ts-ignore: negate may not be called
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    // @ts-ignore: Memoise may not be used
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<start>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}